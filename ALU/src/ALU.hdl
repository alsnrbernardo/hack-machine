/**
 * The ALU (Arithmetic Logic Unit). Computes one of the following functions:
 * 
 *          x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 *                  x+1, y+1, x-1, y-1, x&y, x|y  
 *
 * on two 16-bit inputs according to 6 input bits denoted zx, nx, zy, ny, f, no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 *
 * The ALU logic manipulates the x and y inputs and operates on the resulting values as follows:
 *
 *      if (zx == 1) set x = 0           - 16-bit zero constant
 *      if (nx == 1) set x = !x          - bitwise not
 *      if (zy == 1) set y = 0           - 16-bit zero constant
 *      if (ny == 1) set y = !y          - bitwise not
 *      if (f == 1)  set out = x + y     - integer 2's complement addition
 *      if (f == 0)  set out = x & y     - bitwise and
 *      if (no == 1) set out = !out      - bitwise not
 *      if (out == 0) set zr = 1         - zero output flag
 *      if (out < 0) set ng = 1          - negative output flag
 */

CHIP ALU {
    IN  
        x[16], y[16],
        zx,
        nx,
        zy,
        ny,
        f,
        no;

    OUT 
        out[16],
        zr,
        ng;

    PARTS:
    Mux16   (a=x, b=false, sel=zx, out=xOrZero);
    Not16   (in=xOrZero, out=notX);
    Mux16   (a=xOrZero, b=notX, sel=nx, out=presetX);
 
    Mux16   (a=y, b=false, sel=zy, out=yOrZero); 
    Not16   (in=yOrZero, out=notY);
    Mux16   (a=yOrZero, b=notY, sel=ny, out=presetY);

    And16   (a=presetX, b=presetY, out=xAndY);
    Add16   (a=presetX, b=presetY, out=xPlusY);
    Mux16   (a=xAndY, b=xPlusY, sel=f, out=fResult);
    
    Not16   (in=fResult, out=notFResult);
    Mux16   (a=fResult, b=notFResult, sel=no, out=result);

    Or16Way (in=result, out=orResult);
    Not     (in=orResult, out=zr);
    Neg16   (in=result, out=ng);
    Or16    (a=result, b=false, out=out);  
}