/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16], // 16-bit inputs        
        zx,           // zero the x input
        nx,           // negates the x input
        zy,           // zero the y input
        ny,           // negates the y input
        f,            // computes out = x + y (if 1) or x & y (if 0)
        no;           // negates the output

    OUT 
        out[16],      // 16-bit output
        zr,           // 1 if (out == 0), 0 otherwise
        ng;           // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16 (a=x, b=false, sel=zx, out=zxX);
    Mux16 (a=false, b=true, sel=nx, out=nxs);
    And16 (a=zxX, b=nxs, out=zxAndNx);
    Not16 (in=zxAndNx, out=zxNandNx);
    Or16  (a=zxX, b=nxs, out=zxOrNx);
    And16 (a=zxNandNx, b=zxOrNx, out=zxXorNx);

    Mux16 (a=y, b=false, sel=zy, out=zyY);   
    Mux16 (a=false, b=true, sel=ny, out=nys);
    And16 (a=zyY, b=nys, out=zyAndNy);
    Not16 (in=zyAndNy, out=zyNandNy);
    Or16  (a=zyY, b=nys, out=zyOrNy);
    And16 (a=zyNandNy, b=zyOrNy, out=zyXorNy);

    And16 (a=zxXorNx, b=zyXorNy, out=xAndY);
    Add16 (a=zxXorNx, b=zyXorNy, out=xPlusY);
    
    Mux16(a=xAndY, b=xPlusY, sel=f, out=fApplied);
    Mux16 (a=false, b=true, sel=no, out=nos);
    And16 (a=fApplied, b=nos, out=fAndNo);
    Not16 (in=fAndNo, out=fNandNo);
    Or16  (a=fApplied, b=nos, out=fOrNo);
    And16 (a=fNandNo, b=fOrNo, out=out);

}